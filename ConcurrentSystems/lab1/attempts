
int point_cmp_by_x(const void * a, const void * b)
{
	struct point *ia = (struct point *) a;
	struct point *ib = (struct point *) b;

	if (ia->x < ib->x)
		return -1;
	else if (ia->x > ib->x)
		return 1;
	else
		return 0;
}
int point_cmp_by_y(const void * a, const void * b)
{
	struct point *ia = (struct point *) a;
	struct point *ib = (struct point *) b;

	if (ia->x < ib->x)
		return -1;
	else if (ia->x > ib->x)
		return 1;
	else
		return 0;
}

void print_array(point cities[], int ncities)
{
	int i=0;
	for (i = 0; i < ncities; i++) {
		printf("%d)\t%lf\t%lf\n", i, cities[i].x, cities[i].y);
	}
}

double get_median(point cities[], int ncities, int axis)
{
	int i=0;
	double sum=0;
	for (i = 0; i < ncities; i++) {
		sum += (axis == 0) ? cities[i]->x : cities[i]->y;
	}
	return sum/ncities;
}

int get_median_number(point cities[], int ncities, int median, int axis)
{
	int i=0,count=0;
	for (i = 0; i < ncities; i++) {
		if(axis == 0){
			if(cities[i]->x <= median)
				count++;
			else
				return count;
		}
		else
		{
			if(cities[i]->y <= median)
				count++;
			else
				return count;
		}
	}
}

node * build_kd_tree(point cities[], int ncities, int depth)
{
	if(ncities == 1)
		return create_leaf_node(cities[0], 0, -99);
	else
	{
		//Odd
		if(depth & 1 == 1){
			qsort(cities, ncities, sizeof(struct point), point_cmp_by_x);
			double median = get_median(cities, ncities, 0);
			int count = get_median_number(cities, ncities, median, 0);

		}
	}
}


